"use strict";var app=angular.module("alfredMaterial",["ngMaterial","ngRoute","ngLoadScript","ngSanitize"]);app.config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("deep-purple",{"default":"400"}).accentPalette("amber"),$mdThemingProvider.theme("code").primaryPalette("cyan",{"default":"700"}).accentPalette("pink"),$mdThemingProvider.theme("comics").primaryPalette("red",{"default":"600"}).accentPalette("amber"),$mdThemingProvider.alwaysWatchTheme(!0)}]),app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),app.config(["$routeProvider","$mdThemingProvider",function($routeProvider,$mdThemingProvider){$routeProvider.when("/",{templateUrl:"/views/home/home.html",title:"Home",theme:"default",iconColor:"#7E57C2"}).when("/code",{templateUrl:"/views/projects/projects.html",title:"Code",theme:"code",iconColor:"#0097A7"}).when("/comics",{templateUrl:"/views/library/library.html",title:"Library",theme:"comics",iconColor:"#E53935"}).when("/resume",{redirectTo:function(){$window.location.href="/resume"}}).when("/old",{redirectTo:function(){$window.location.href="/old"}}).when("/mean",{redirectTo:function(){$window.location.href="/mean"}}).otherwise({redirectTo:"/"})}]),app.config(["$mdIconProvider",function($mdIconProvider){$mdIconProvider.icon("demo","icons/desktop mac.svg").icon("github","icons/github.svg").icon("comic","icons/dashboard.svg").icon("code","icons/code.svg").icon("resume","icons/description.svg").icon("home","icons/home.svg").icon("info","icons/info.svg")}]),app.run(["$http","$templateCache",function($http,$templateCache){var iconUrls=["icons/desktop mac.svg","icons/github.svg","icons/dashboard.svg","icons/code.svg","icons/description.svg","icons/home.svg","icons/info.svg"];angular.forEach(iconUrls,function(url){$http.get(url,{cache:$templateCache})})}]),app.controller("AppCtrl",["$scope","$log","$location",function($scope,$log,$location){$scope.$on("$routeChangeSuccess",function(event,data){$scope.theme=data.theme})}]),app.controller("NavCtrl",["$scope","$location","$mdSidenav","$log","$window",function($scope,$location,$mdSidenav,$log,$window){$scope.$on("$routeChangeSuccess",function(event,data){$scope.pageTitle=data.title,$scope.iconColor=data.iconColor}),$scope.navLinks=[{name:"Home",url:"/",icon:"home"},{name:"Code",url:"/code",icon:"code"},{name:"Library",url:"/comics",icon:"comic"},{name:"Resume",url:"/resume",icon:"resume"}],$scope.toggleSideMenu=function(){$mdSidenav("sideNav").toggle().then(function(){if($mdSidenav("sideNav").isOpen()){var backdropElement=document.getElementsByClassName("md-sidenav-backdrop");backdropElement&&backdropElement[0].addEventListener("click",function(){animateToMenu()})}})},$scope.navigateTo=function(url){"/resume"==url?$window.location.href=url:$location.path(url)}}]),app.controller("ProjectsCtrl",["$scope","$timeout","$mdSidenav","$log","$mdDialog","$sce",function($scope,$timeout,$mdSidenav,$log,$mdDialog,$sce){$scope.allProjects={mdSite:{name:"Alfred Material",screenshot:"/imgs/projects/md-site-cover.jpg",description:"",repository:"https://github.com/alfred/material-website",demoLink:"http://alfredabab.io",tech:[],learned:"",darkOverlay:!0},ef:{name:"Exemption Check",screenshot:"/imgs/projects/ef.png",description:"",repository:"",info:$sce.trustAsHtml("TurboTax Exemption Check is a tool for customers to find out whether they are exempt from the healthcare penalty for that tax year. While working on Exemption Check, I was an engineer responsible for implementing cross-device data persistence. This allowed customers to start the application on one device and sign out, and then sign back in on a second deviceand complete their application where they left off.</p><p>I was also part of the small team that was tasked with a massive rewrite of the tool once the Affordable Care Act law changed to allow one form per household instead of one form per member of the household. This required rapid implementation of features and also required that we didn’t break the core functionality as that was still the primary use-case.</p><p>I was a full-stack engineer, as I worked with the backend services as much as I was doing CSS tweaks on the frontend which required comprehensive unit tests for both. During peak times I was also responsible for monitoring our Splunk logs for service outtages and errors."),demoLink:"https://turbotax.intuit.com/health-care/exemptions",tech:[],learned:"",darkOverlay:!0},oldSite:{name:"Old Website",screenshot:"/imgs/projects/old-s.png",description:"",repository:"https://github.com/alfred/Website",demoLink:"/old",tech:[],learned:"https://github.com/alfred/Website"},mean:{name:"MEAN Skeleton",screenshot:"/imgs/projects/md-orange-pyramids.png",description:"",repository:"https://github.com/alfred/mean-skeleton",demoLink:"/mean",tech:[],learned:""},moderator:{name:"Cengage Moderator",screenshot:"/imgs/projects/md-teal-tri.jpg",description:"",repository:"",info:$sce.trustAsHtml("While working on Cengage Moderator, I was on a small team of engineers who had a lot of freedom over the architecture and technology used to create a question and answer application for the company to use to ask questions of the CTO during his office hours.</p><p>I was responsible for architecting the user model. This means that I implemented user account creation, user sessions and account recovery. All of my solutions were created in-house as the popular Ruby gem, “devise” was too heavy for the simplicity of the project. A long with user accounts, I also implemented user profiles and access levels for roles.</p><p> Due to the nature of the application, we had many nested data-models and my team had to teach ourselves relational data models. For example, we used many-to-many for users favoriting and voting on questions, so that a user could browse their favorite questions. I also set up automated unit and integration testing suites and wrote some of the frontend interactions."),demoLink:"http://moderator.cengage.com",tech:[],learned:""},cssLogos:{name:"CSS Logos",screenshot:"/imgs/projects/md-grey-circle.png",description:"",repository:"https://github.com/alfred/css-logos",demoLink:"http://alfred.github.io/css-logos/",tech:[],learned:""}},$scope.openProjectInfo=function(ev,name){var bodyElement=angular.element(document.body),thisProject=$scope.allProjects[name],dialogContent=$mdDialog.alert({parent:bodyElement,targetEvent:ev,template:'<md-dialog>  <md-toolbar>   <div class="md-toolbar-tools">     <h2>{{project.name}}</h2>   </div>  </md-toolbar>  <md-dialog-content>    <p class="intent-p" ng-bind-html="project.info"></p>  </md-dialog-content>  <div class="md-actions">    <md-button ng-click="closeProjectInfo()" class="md-primary">      Impressive!    </md-button>  </div></md-dialog>',clickOutsideToClose:!0,escapeToClose:!0,locals:{project:thisProject},controller:function($scope,$mdDialog,project){$scope.project=project,$scope.closeProjectInfo=function(){$mdDialog.hide()}}});$mdDialog.show(dialogContent).then(function(){})}}]),app.directive("projImg",function(){return function(scope,element,attrs){attrs.$observe("projImg",function(value){element.css({"background-image":"url("+value+")"})})}}),app.controller("HomeCtrl",["$scope","$sce",function($scope,$sce){$scope.hobbies=[{name:"Longboarder",desc:$sce.trustAsHtml("I learned to ride about a year ago, and learning might have been one of the  best things I've ever done. It's a really fun way to get around and an even better way to stay active.</p><p> I even managed to design a decal and paint it onto my board!")},{name:"Comic Reader",desc:$sce.trustAsHtml("I'm a huge DC comics fan. I can appreciate the amount of work that goes into building a multiverse.</p><p>There are so many moving parts to factor in and it's amazing to see how authors can continue to innovate the characters and present their fans with new topics to think about every issue."),link:"#comics"},{name:"Developer",desc:$sce.trustAsHtml('I\'m a full-stack web developer who happens to write lots of Javascript. </p><p>I started off building apps with Ruby on Rails and have moved on to Node and Express. What you\'re looking at right now was actually built with Node and Express, and a generous amount of Angular. Check out my other work <a style="text-decoration:none" href="/code">here</a>'),link:""}],$scope.contactInfos=[{id:"btn-twitter",label:"TWITTER",url:"https://twitter.com/alfredabab_io"},{id:"btn-github",label:"GITHUB",url:"https://github.com/alfred"},{id:"btn-linkedin",label:"LINKEDIN",url:"https://www.linkedin.com/in/alfredababio/en"},{id:"btn-email",label:"EMAIL",url:"mailto:aababio75@gmail.com"}],$scope.aboutText={intro:"Hi, I'm Alfred.",body:$sce.trustAsHtml("I'm a Computer Science student at Northeastern, an amateur pool (pocket billiards) player, and a firm believer that anyone can learn to do anything by Googling it long enough.</p><p>Also, my friends think I'm a pretty cool guy (even though they'll deny it after reading this.)")}}]),function(ng){var app=ng.module("ngLoadScript",[]);app.directive("script",function(){return{restrict:"E",scope:!1,link:function(scope,elem,attr){if("text/javascript-lazy"===attr.type){var s=document.createElement("script");s.type="text/javascript";var src=elem.attr("src");if(void 0!==src)s.src=src;else{var code=elem.text();s.text=code}document.head.appendChild(s),elem.remove()}}}})}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zb3VyY2UvanMvYWxmcmVkLW1hdGVyaWFsLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiZGVmYXVsdCIsImFjY2VudFBhbGV0dGUiLCJhbHdheXNXYXRjaFRoZW1lIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJodG1sNU1vZGUiLCIkcm91dGVQcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsInRpdGxlIiwiaWNvbkNvbG9yIiwicmVkaXJlY3RUbyIsIiR3aW5kb3ciLCJsb2NhdGlvbiIsImhyZWYiLCJvdGhlcndpc2UiLCIkbWRJY29uUHJvdmlkZXIiLCJpY29uIiwicnVuIiwiJGh0dHAiLCIkdGVtcGxhdGVDYWNoZSIsImljb25VcmxzIiwiZm9yRWFjaCIsInVybCIsImdldCIsImNhY2hlIiwiY29udHJvbGxlciIsIiRzY29wZSIsIiRsb2ciLCIkbG9jYXRpb24iLCIkb24iLCJldmVudCIsImRhdGEiLCIkbWRTaWRlbmF2IiwicGFnZVRpdGxlIiwibmF2TGlua3MiLCJuYW1lIiwidG9nZ2xlU2lkZU1lbnUiLCJ0b2dnbGUiLCJ0aGVuIiwiaXNPcGVuIiwiYmFja2Ryb3BFbGVtZW50IiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiYWRkRXZlbnRMaXN0ZW5lciIsImFuaW1hdGVUb01lbnUiLCJuYXZpZ2F0ZVRvIiwicGF0aCIsIiR0aW1lb3V0IiwiJG1kRGlhbG9nIiwiJHNjZSIsImFsbFByb2plY3RzIiwibWRTaXRlIiwic2NyZWVuc2hvdCIsImRlc2NyaXB0aW9uIiwicmVwb3NpdG9yeSIsImRlbW9MaW5rIiwidGVjaCIsImxlYXJuZWQiLCJkYXJrT3ZlcmxheSIsImVmIiwiaW5mbyIsInRydXN0QXNIdG1sIiwib2xkU2l0ZSIsIm1lYW4iLCJtb2RlcmF0b3IiLCJjc3NMb2dvcyIsIm9wZW5Qcm9qZWN0SW5mbyIsImV2IiwiYm9keUVsZW1lbnQiLCJlbGVtZW50IiwiYm9keSIsInRoaXNQcm9qZWN0IiwiZGlhbG9nQ29udGVudCIsImFsZXJ0IiwicGFyZW50IiwidGFyZ2V0RXZlbnQiLCJ0ZW1wbGF0ZSIsImNsaWNrT3V0c2lkZVRvQ2xvc2UiLCJlc2NhcGVUb0Nsb3NlIiwibG9jYWxzIiwicHJvamVjdCIsImNsb3NlUHJvamVjdEluZm8iLCJoaWRlIiwic2hvdyIsImRpcmVjdGl2ZSIsInNjb3BlIiwiYXR0cnMiLCIkb2JzZXJ2ZSIsInZhbHVlIiwiY3NzIiwiYmFja2dyb3VuZC1pbWFnZSIsImhvYmJpZXMiLCJkZXNjIiwibGluayIsImNvbnRhY3RJbmZvcyIsImlkIiwibGFiZWwiLCJhYm91dFRleHQiLCJpbnRybyIsIm5nIiwicmVzdHJpY3QiLCJlbGVtIiwiYXR0ciIsInR5cGUiLCJzIiwiY3JlYXRlRWxlbWVudCIsInNyYyIsInVuZGVmaW5lZCIsImNvZGUiLCJ0ZXh0IiwiaGVhZCIsImFwcGVuZENoaWxkIiwicmVtb3ZlIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUVBLElBQUlBLEtBQU1DLFFBQVFDLE9BQU8sa0JBQW1CLGFBQWMsVUFBVyxlQUFnQixjQUdyRkYsS0FBSUcsUUFBQSxxQkFBTyxTQUFTQyxvQkFDbEJBLG1CQUFtQkMsTUFBTSxXQUN4QkMsZUFBZSxlQUNkQyxVQUFXLFFBRVpDLGNBQWMsU0FFZkosbUJBQW1CQyxNQUFNLFFBQ3hCQyxlQUFlLFFBQ2RDLFVBQVcsUUFFWkMsY0FBYyxRQUVmSixtQkFBbUJDLE1BQU0sVUFDeEJDLGVBQWUsT0FDZEMsVUFBVyxRQUVaQyxjQUFjLFNBRWZKLG1CQUFtQkssa0JBQWlCLE1BR3RDVCxJQUFJRyxRQUFBLG9CQUFPLFNBQVNPLG1CQUNsQkEsa0JBQWtCQyxXQUFVLE1BRzlCWCxJQUFJRyxRQUFBLGlCQUFBLHFCQUFPLFNBQVNTLGVBQWdCUixvQkFDbENRLGVBQ0dDLEtBQUssS0FDSkMsWUFBYSx3QkFDYkMsTUFBTyxPQUNQVixNQUFPLFVBQ1BX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QUFLLDhCQUVMeUUsR0FBSSxlQUNKQyxNQUFPLFdBQ1AxRSxJQUFLLGdEQUVMeUUsR0FBSSxZQUNKQyxNQUFPLFFBQ1AxRSxJQUFLLCtCQUdQSSxPQUFPdUUsV0FDTEMsTUFBTyxrQkFDUDVCLEtBQU1yQixLQUFLWSxZQUFZLDRSQUsxQixTQUFVc0MsSUFHVCxHQUFJMUcsS0FBTTBHLEdBQUd4RyxPQUFPLGtCQUVwQkYsS0FBSTJGLFVBQVUsU0FBVSxXQUN0QixPQUNFZ0IsU0FBVSxJQUNWZixPQUFPLEVBQ1BRLEtBQU0sU0FBU1IsTUFBT2dCLEtBQU1DLE1BRTFCLEdBQWdCLHlCQUFaQSxLQUFLQyxLQUNULENBQ0UsR0FBSUMsR0FBSS9ELFNBQVNnRSxjQUFjLFNBQy9CRCxHQUFFRCxLQUFPLGlCQUNULElBQUlHLEtBQU1MLEtBQUtDLEtBQUssTUFDcEIsSUFBU0ssU0FBTkQsSUFFQ0YsRUFBRUUsSUFBTUEsUUFHWixDQUNJLEdBQUlFLE1BQU9QLEtBQUtRLE1BQ2hCTCxHQUFFSyxLQUFPRCxLQUVibkUsU0FBU3FFLEtBQUtDLFlBQVlQLEdBQzFCSCxLQUFLVyxlQU1idEgiLCJmaWxlIjoiYWxmcmVkLW1hdGVyaWFsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xyXG5cclxudmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhbGZyZWRNYXRlcmlhbCcsIFsnbmdNYXRlcmlhbCcsICduZ1JvdXRlJywgJ25nTG9hZFNjcmlwdCcsICduZ1Nhbml0aXplJ10pO1xyXG5cclxuXHJcbmFwcC5jb25maWcoZnVuY3Rpb24oJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XHJcbiAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdkZWZhdWx0JylcclxuICAucHJpbWFyeVBhbGV0dGUoJ2RlZXAtcHVycGxlJywge1xyXG4gICAgJ2RlZmF1bHQnOiAnNDAwJ1xyXG4gIH0pXHJcbiAgLmFjY2VudFBhbGV0dGUoJ2FtYmVyJyk7XHJcblxyXG4gICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnY29kZScpXHJcbiAgLnByaW1hcnlQYWxldHRlKCdjeWFuJywge1xyXG4gICAgJ2RlZmF1bHQnIDonNzAwJ1xyXG4gIH0pXHJcbiAgLmFjY2VudFBhbGV0dGUoJ3BpbmsnKTtcclxuXHJcbiAgJG1kVGhlbWluZ1Byb3ZpZGVyLnRoZW1lKCdjb21pY3MnKVxyXG4gIC5wcmltYXJ5UGFsZXR0ZSgncmVkJywge1xyXG4gICAgJ2RlZmF1bHQnOiAnNjAwJ1xyXG4gIH0pXHJcbiAgLmFjY2VudFBhbGV0dGUoJ2FtYmVyJyk7XHJcblxyXG4gICRtZFRoZW1pbmdQcm92aWRlci5hbHdheXNXYXRjaFRoZW1lKHRydWUpO1xyXG59KTtcclxuXHJcbmFwcC5jb25maWcoZnVuY3Rpb24oJGxvY2F0aW9uUHJvdmlkZXIpIHtcclxuICAkbG9jYXRpb25Qcm92aWRlci5odG1sNU1vZGUodHJ1ZSk7XHJcbn0pO1xyXG5cclxuYXBwLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJG1kVGhlbWluZ1Byb3ZpZGVyKSB7XHJcbiAgJHJvdXRlUHJvdmlkZXJcclxuICAgIC53aGVuKCcvJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9ob21lL2hvbWUuaHRtbCcsXHJcbiAgICAgIHRpdGxlOiAnSG9tZScsXHJcbiAgICAgIHRoZW1lOiAnZGVmYXVsdCcsXHJcbiAgICAgIGljb25Db2xvcjogJyM3RTU3QzInXHJcbiAgICB9KVxyXG4gICAgLndoZW4oJy9jb2RlJywge1xyXG4gICAgICB0ZW1wbGF0ZVVybDogJy92aWV3cy9wcm9qZWN0cy9wcm9qZWN0cy5odG1sJyxcclxuICAgICAgdGl0bGU6ICdDb2RlJyxcclxuICAgICAgdGhlbWU6ICdjb2RlJyxcclxuICAgICAgaWNvbkNvbG9yOiAnIzAwOTdBNydcclxuICAgIH0pXHJcbiAgICAud2hlbignL2NvbWljcycsIHtcclxuICAgICAgdGVtcGxhdGVVcmw6ICcvdmlld3MvbGlicmFyeS9saWJyYXJ5Lmh0bWwnLFxyXG4gICAgICB0aXRsZTogJ0xpYnJhcnknLFxyXG4gICAgICB0aGVtZTogJ2NvbWljcycsXHJcbiAgICAgIGljb25Db2xvcjogJyNFNTM5MzUnXHJcbiAgICB9KVxyXG4gICAgLndoZW4oJy9yZXN1bWUnLCB7XHJcbiAgICAgIHJlZGlyZWN0VG86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9Jy9yZXN1bWUnO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLndoZW4oJy9vbGQnLCB7XHJcbiAgICAgIHJlZGlyZWN0VG86IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICR3aW5kb3cubG9jYXRpb24uaHJlZiA9ICcvb2xkJztcclxuICAgICAgfVxyXG4gICAgfSlcclxuICAgIC53aGVuKCcvbWVhbicsIHtcclxuICAgICAgcmVkaXJlY3RUbzogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0nL21lYW4nO1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gICAgLm90aGVyd2lzZSh7XHJcbiAgICAgIHJlZGlyZWN0VG86ICcvJ1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuYXBwLmNvbmZpZyhmdW5jdGlvbigkbWRJY29uUHJvdmlkZXIpIHtcclxuICAkbWRJY29uUHJvdmlkZXJcclxuICAgIC5pY29uKCdkZW1vJywgJ2ljb25zL2Rlc2t0b3BcXCBtYWMuc3ZnJylcclxuICAgIC5pY29uKCdnaXRodWInLCAnaWNvbnMvZ2l0aHViLnN2ZycpXHJcbiAgICAuaWNvbignY29taWMnLCAnaWNvbnMvZGFzaGJvYXJkLnN2ZycpXHJcbiAgICAuaWNvbignY29kZScsICdpY29ucy9jb2RlLnN2ZycpXHJcbiAgICAuaWNvbigncmVzdW1lJywgJ2ljb25zL2Rlc2NyaXB0aW9uLnN2ZycpXHJcbiAgICAuaWNvbignaG9tZScsICdpY29ucy9ob21lLnN2ZycpXHJcbiAgICAuaWNvbignaW5mbycsICdpY29ucy9pbmZvLnN2ZycpO1xyXG59KTtcclxuXHJcbmFwcC5ydW4oZnVuY3Rpb24oJGh0dHAsICR0ZW1wbGF0ZUNhY2hlKSB7XHJcbiAgdmFyIGljb25VcmxzID0gW1xyXG4gICAgJ2ljb25zL2Rlc2t0b3BcXCBtYWMuc3ZnJyxcclxuICAgICdpY29ucy9naXRodWIuc3ZnJyxcclxuICAgICdpY29ucy9kYXNoYm9hcmQuc3ZnJyxcclxuICAgICdpY29ucy9jb2RlLnN2ZycsXHJcbiAgICAnaWNvbnMvZGVzY3JpcHRpb24uc3ZnJyxcclxuICAgICdpY29ucy9ob21lLnN2ZycsXHJcbiAgICAnaWNvbnMvaW5mby5zdmcnXHJcbiAgXTtcclxuXHJcbiAgYW5ndWxhci5mb3JFYWNoKGljb25VcmxzLCBmdW5jdGlvbih1cmwpIHtcclxuICAgICRodHRwLmdldCh1cmwsIHtjYWNoZTogJHRlbXBsYXRlQ2FjaGV9KTtcclxuICB9KTtcclxufSk7XHJcblxyXG5hcHAuY29udHJvbGxlcignQXBwQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJGxvZywgJGxvY2F0aW9uKSB7XHJcbiAgJHNjb3BlLiRvbignJHJvdXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAkc2NvcGUudGhlbWUgPSBkYXRhLnRoZW1lO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcbmFwcC5jb250cm9sbGVyKCdOYXZDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkbG9jYXRpb24sICRtZFNpZGVuYXYsICRsb2csICR3aW5kb3cpIHtcclxuICAkc2NvcGUuJG9uKCckcm91dGVDaGFuZ2VTdWNjZXNzJywgZnVuY3Rpb24gKGV2ZW50LCBkYXRhKSB7XHJcbiAgICAkc2NvcGUucGFnZVRpdGxlID0gZGF0YS50aXRsZTtcclxuICAgICRzY29wZS5pY29uQ29sb3IgPSBkYXRhLmljb25Db2xvcjtcclxuICB9KTtcclxuXHJcbiAgJHNjb3BlLm5hdkxpbmtzID0gW3tcclxuICAgIG5hbWU6ICdIb21lJyxcclxuICAgIHVybDogJy8nLFxyXG4gICAgaWNvbjogJ2hvbWUnXHJcbiAgfSx7XHJcbiAgICBuYW1lOiAnQ29kZScsXHJcbiAgICB1cmw6ICcvY29kZScsXHJcbiAgICBpY29uOiAnY29kZSdcclxuICB9LCB7XHJcbiAgICBuYW1lOiAnTGlicmFyeScsXHJcbiAgICB1cmw6ICcvY29taWNzJyxcclxuICAgIGljb246ICdjb21pYydcclxuICB9LCB7XHJcbiAgICBuYW1lOiAnUmVzdW1lJyxcclxuICAgIHVybDogJy9yZXN1bWUnLFxyXG4gICAgaWNvbjogJ3Jlc3VtZSdcclxuICB9XTtcclxuICBcclxuICAkc2NvcGUudG9nZ2xlU2lkZU1lbnUgPSBmdW5jdGlvbigpIHtcclxuICAgICRtZFNpZGVuYXYoJ3NpZGVOYXYnKS50b2dnbGUoKVxyXG4gICAgLnRoZW4oZnVuY3Rpb24oKXtcclxuICAgICAgaWYgKCRtZFNpZGVuYXYoJ3NpZGVOYXYnKS5pc09wZW4oKSkge1xyXG4gICAgICAgIHZhciBiYWNrZHJvcEVsZW1lbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdtZC1zaWRlbmF2LWJhY2tkcm9wJyk7XHJcbiAgICAgICAgaWYoYmFja2Ryb3BFbGVtZW50KSB7XHJcbiAgICAgICAgICBiYWNrZHJvcEVsZW1lbnRbMF0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgYW5pbWF0ZVRvTWVudSgpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9O1xyXG5cclxuICAkc2NvcGUubmF2aWdhdGVUbyA9IGZ1bmN0aW9uKHVybCkge1xyXG4gICAgaWYgKHVybCA9PSAnL3Jlc3VtZScpIHtcclxuICAgICAgJHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdXJsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJGxvY2F0aW9uLnBhdGgodXJsKTsgICAgICBcclxuICAgIH1cclxuXHJcbiAgfTtcclxufSk7XHJcblxuYXBwLmNvbnRyb2xsZXIoJ1Byb2plY3RzQ3RybCcsIGZ1bmN0aW9uKCRzY29wZSwgJHRpbWVvdXQsICRtZFNpZGVuYXYsICRsb2csICRtZERpYWxvZywgJHNjZSkge1xuXG4gICRzY29wZS5hbGxQcm9qZWN0cyA9IHtcbiAgICAnbWRTaXRlJzoge1xuICAgICAgXCJuYW1lXCI6IFwiQWxmcmVkIE1hdGVyaWFsXCIsXG4gICAgICBcInNjcmVlbnNob3RcIjogJy9pbWdzL3Byb2plY3RzL21kLXNpdGUtY292ZXIuanBnJyxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogJycsXG4gICAgICBcInJlcG9zaXRvcnlcIjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hbGZyZWQvbWF0ZXJpYWwtd2Vic2l0ZScsXG4gICAgICBcImRlbW9MaW5rXCI6ICdodHRwOi8vYWxmcmVkYWJhYi5pbycsXG4gICAgICBcInRlY2hcIjogW10sXG4gICAgICBcImxlYXJuZWRcIjogJycsXG4gICAgICBcImRhcmtPdmVybGF5XCI6IHRydWVcbiAgICB9LFxuICAgICdlZic6IHtcbiAgICAgIFwibmFtZVwiOiBcIkV4ZW1wdGlvbiBDaGVja1wiLFxuICAgICAgXCJzY3JlZW5zaG90XCI6ICcvaW1ncy9wcm9qZWN0cy9lZi5wbmcnLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiAnJyxcbiAgICAgIFwicmVwb3NpdG9yeVwiOiAnJyxcbiAgICAgIFwiaW5mb1wiOiAkc2NlLnRydXN0QXNIdG1sKCdUdXJib1RheCBFeGVtcHRpb24gQ2hlY2sgaXMgYSB0b29sIGZvciBjdXN0b21lcnMgdG8gZmluZCBvdXQgd2hldGhlciB0aGV5IGFyZSBleGVtcHQgZnJvbSB0aGUgaGVhbHRoY2FyZSBwZW5hbHR5IGZvciB0aGF0IHRheCB5ZWFyLiAnICsgXG4gICAgICAgICAgICAgICAgJ1doaWxlIHdvcmtpbmcgb24gRXhlbXB0aW9uIENoZWNrLCBJIHdhcyBhbiBlbmdpbmVlciByZXNwb25zaWJsZSBmb3IgaW1wbGVtZW50aW5nIGNyb3NzLWRldmljZSBkYXRhIHBlcnNpc3RlbmNlLiAnICsgXG4gICAgICAgICAgICAgICAgJ1RoaXMgYWxsb3dlZCBjdXN0b21lcnMgdG8gc3RhcnQgdGhlIGFwcGxpY2F0aW9uIG9uIG9uZSBkZXZpY2UgYW5kIHNpZ24gb3V0LCBhbmQgdGhlbiBzaWduIGJhY2sgaW4gb24gYSBzZWNvbmQgZGV2aWNlJyArIFxuICAgICAgICAgICAgICAgICdhbmQgY29tcGxldGUgdGhlaXIgYXBwbGljYXRpb24gd2hlcmUgdGhleSBsZWZ0IG9mZi48L3A+PHA+JytcbiAgICAgICAgICAgICAgICdJIHdhcyBhbHNvIHBhcnQgb2YgdGhlIHNtYWxsIHRlYW0gdGhhdCB3YXMgdGFza2VkIHdpdGggYSBtYXNzaXZlIHJld3JpdGUgb2YgdGhlIHRvb2wgb25jZSB0aGUgQWZmb3JkYWJsZSBDYXJlIEFjdCAnICsgXG4gICAgICAgICAgICAgICAgJ2xhdyBjaGFuZ2VkIHRvIGFsbG93IG9uZSBmb3JtIHBlciBob3VzZWhvbGQgaW5zdGVhZCBvZiBvbmUgZm9ybSBwZXIgbWVtYmVyIG9mIHRoZSBob3VzZWhvbGQuIFRoaXMgcmVxdWlyZWQgcmFwaWQgJyArIFxuICAgICAgICAgICAgICAgICdpbXBsZW1lbnRhdGlvbiBvZiBmZWF0dXJlcyBhbmQgYWxzbyByZXF1aXJlZCB0aGF0IHdlIGRpZG7igJl0IGJyZWFrIHRoZSBjb3JlIGZ1bmN0aW9uYWxpdHkgYXMgdGhhdCB3YXMgc3RpbGwgdGhlIHByaW1hcnkgdXNlLWNhc2UuPC9wPjxwPicgK1xuICAgICAgICAgICAgICAgJ0kgd2FzIGEgZnVsbC1zdGFjayBlbmdpbmVlciwgYXMgSSB3b3JrZWQgd2l0aCB0aGUgYmFja2VuZCBzZXJ2aWNlcyBhcyBtdWNoIGFzIEkgd2FzIGRvaW5nIENTUyB0d2Vha3Mgb24gdGhlIGZyb250ZW5kIHdoaWNoJyArIFxuICAgICAgICAgICAgICAgJyByZXF1aXJlZCBjb21wcmVoZW5zaXZlIHVuaXQgdGVzdHMgZm9yIGJvdGguIER1cmluZyBwZWFrIHRpbWVzIEkgd2FzIGFsc28gcmVzcG9uc2libGUgZm9yIG1vbml0b3Jpbmcgb3VyIFNwbHVuayBsb2dzIGZvciBzZXJ2aWNlIG91dHRhZ2VzIGFuZCBlcnJvcnMuJyksXG4gICAgICBcImRlbW9MaW5rXCI6ICdodHRwczovL3R1cmJvdGF4LmludHVpdC5jb20vaGVhbHRoLWNhcmUvZXhlbXB0aW9ucycsXG4gICAgICBcInRlY2hcIjogW10sXG4gICAgICBcImxlYXJuZWRcIjogJycsXG4gICAgICBcImRhcmtPdmVybGF5XCI6IHRydWVcbiAgICB9LFxuICAgICdvbGRTaXRlJzoge1xuICAgICAgXCJuYW1lXCI6IFwiT2xkIFdlYnNpdGVcIixcbiAgICAgIFwic2NyZWVuc2hvdFwiOiAnL2ltZ3MvcHJvamVjdHMvb2xkLXMucG5nJyxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogJycsXG4gICAgICBcInJlcG9zaXRvcnlcIjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hbGZyZWQvV2Vic2l0ZScsXG4gICAgICBcImRlbW9MaW5rXCI6ICcvb2xkJyxcbiAgICAgIFwidGVjaFwiOiBbXSxcbiAgICAgIFwibGVhcm5lZFwiOiAnaHR0cHM6Ly9naXRodWIuY29tL2FsZnJlZC9XZWJzaXRlJ1xuICAgIH0sXG4gICAgJ21lYW4nOiB7XG4gICAgICBcIm5hbWVcIjogXCJNRUFOIFNrZWxldG9uXCIsXG4gICAgICBcInNjcmVlbnNob3RcIjogJy9pbWdzL3Byb2plY3RzL21kLW9yYW5nZS1weXJhbWlkcy5wbmcnLFxuICAgICAgXCJkZXNjcmlwdGlvblwiOiAnJyxcbiAgICAgIFwicmVwb3NpdG9yeVwiOiAnaHR0cHM6Ly9naXRodWIuY29tL2FsZnJlZC9tZWFuLXNrZWxldG9uJyxcbiAgICAgIFwiZGVtb0xpbmtcIjogJy9tZWFuJyxcbiAgICAgIFwidGVjaFwiOiBbXSxcbiAgICAgIFwibGVhcm5lZFwiOiAnJ1xuICAgIH0sXG4gICAgJ21vZGVyYXRvcic6IHtcbiAgICAgIFwibmFtZVwiOiBcIkNlbmdhZ2UgTW9kZXJhdG9yXCIsXG4gICAgICBcInNjcmVlbnNob3RcIjogJy9pbWdzL3Byb2plY3RzL21kLXRlYWwtdHJpLmpwZycsXG4gICAgICBcImRlc2NyaXB0aW9uXCI6ICcnLFxuICAgICAgXCJyZXBvc2l0b3J5XCI6ICcnLFxuICAgICAgXCJpbmZvXCI6ICRzY2UudHJ1c3RBc0h0bWwoJ1doaWxlIHdvcmtpbmcgb24gQ2VuZ2FnZSBNb2RlcmF0b3IsIEkgd2FzIG9uIGEgc21hbGwgdGVhbSBvZiBlbmdpbmVlcnMgd2hvIGhhZCBhIGxvdCBvZiBmcmVlZG9tIG92ZXIgdGhlIGFyY2hpdGVjdHVyZSAnICsgXG4gICAgICAgICAgICAgICAgJ2FuZCB0ZWNobm9sb2d5IHVzZWQgdG8gY3JlYXRlIGEgcXVlc3Rpb24gYW5kIGFuc3dlciBhcHBsaWNhdGlvbiBmb3IgdGhlIGNvbXBhbnkgdG8gdXNlIHRvIGFzayBxdWVzdGlvbnMgb2YgdGhlIENUTyBkdXJpbmcgaGlzIG9mZmljZSBob3Vycy48L3A+PHA+JyArXG4gICAgICAgICAgICAgICAgJ0kgd2FzIHJlc3BvbnNpYmxlIGZvciBhcmNoaXRlY3RpbmcgdGhlIHVzZXIgbW9kZWwuIFRoaXMgbWVhbnMgdGhhdCBJIGltcGxlbWVudGVkIHVzZXIgYWNjb3VudCBjcmVhdGlvbiwgdXNlciBzZXNzaW9ucyBhbmQgJyArIFxuICAgICAgICAgICAgICAgICdhY2NvdW50IHJlY292ZXJ5LiBBbGwgb2YgbXkgc29sdXRpb25zIHdlcmUgY3JlYXRlZCBpbi1ob3VzZSBhcyB0aGUgcG9wdWxhciBSdWJ5IGdlbSwg4oCcZGV2aXNl4oCdIHdhcyB0b28gaGVhdnkgZm9yIHRoZSBzaW1wbGljaXR5IG9mIHRoZSBwcm9qZWN0LiAnICsgXG4gICAgICAgICAgICAgICAgJ0EgbG9uZyB3aXRoIHVzZXIgYWNjb3VudHMsIEkgYWxzbyBpbXBsZW1lbnRlZCB1c2VyIHByb2ZpbGVzIGFuZCBhY2Nlc3MgbGV2ZWxzIGZvciByb2xlcy48L3A+PHA+ICcgK1xuICAgICAgICAgICAgICAgICdEdWUgdG8gdGhlIG5hdHVyZSBvZiB0aGUgYXBwbGljYXRpb24sIHdlIGhhZCBtYW55IG5lc3RlZCBkYXRhLW1vZGVscyBhbmQgbXkgdGVhbSBoYWQgdG8gdGVhY2ggJyArIFxuICAgICAgICAgICAgICAgICdvdXJzZWx2ZXMgcmVsYXRpb25hbCBkYXRhIG1vZGVscy4gRm9yIGV4YW1wbGUsIHdlIHVzZWQgbWFueS10by1tYW55IGZvciB1c2VycyBmYXZvcml0aW5nIGFuZCB2b3RpbmcgJyArIFxuICAgICAgICAgICAgICAgICdvbiBxdWVzdGlvbnMsIHNvIHRoYXQgYSB1c2VyIGNvdWxkIGJyb3dzZSB0aGVpciBmYXZvcml0ZSBxdWVzdGlvbnMuIEkgYWxzbyBzZXQgdXAgYXV0b21hdGVkIHVuaXQgYW5kICcgKyBcbiAgICAgICAgICAgICAgICAnaW50ZWdyYXRpb24gdGVzdGluZyBzdWl0ZXMgYW5kIHdyb3RlIHNvbWUgb2YgdGhlIGZyb250ZW5kIGludGVyYWN0aW9ucy4nKSxcbiAgICAgIFwiZGVtb0xpbmtcIjogJ2h0dHA6Ly9tb2RlcmF0b3IuY2VuZ2FnZS5jb20nLFxuICAgICAgXCJ0ZWNoXCI6IFtdLFxuICAgICAgXCJsZWFybmVkXCI6ICcnXG4gICAgfSxcbiAgICAnY3NzTG9nb3MnOiB7XG4gICAgICBcIm5hbWVcIjogXCJDU1MgTG9nb3NcIixcbiAgICAgIFwic2NyZWVuc2hvdFwiOiAnL2ltZ3MvcHJvamVjdHMvbWQtZ3JleS1jaXJjbGUucG5nJyxcbiAgICAgIFwiZGVzY3JpcHRpb25cIjogJycsXG4gICAgICBcInJlcG9zaXRvcnlcIjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hbGZyZWQvY3NzLWxvZ29zJyxcbiAgICAgIFwiZGVtb0xpbmtcIjogJ2h0dHA6Ly9hbGZyZWQuZ2l0aHViLmlvL2Nzcy1sb2dvcy8nLFxuICAgICAgXCJ0ZWNoXCI6IFtdLFxuICAgICAgXCJsZWFybmVkXCI6ICcnXG4gICAgfVxuICB9O1xuXG4gICRzY29wZS5vcGVuUHJvamVjdEluZm8gPSBmdW5jdGlvbihldiwgbmFtZSkge1xuICAgIHZhciBib2R5RWxlbWVudCA9IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KTtcbiAgICB2YXIgdGhpc1Byb2plY3QgPSAkc2NvcGUuYWxsUHJvamVjdHNbbmFtZV07XG4gICAgdmFyIGRpYWxvZ0NvbnRlbnQgPSAkbWREaWFsb2cuYWxlcnQoe1xuICAgICAgcGFyZW50OiBib2R5RWxlbWVudCxcbiAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgIHRlbXBsYXRlOlxuICAgICAgICAgICAgJzxtZC1kaWFsb2c+JyArXG4gICAgICAgICAgICAnICA8bWQtdG9vbGJhcj4nICsgXG4gICAgICAgICAgICAnICAgPGRpdiBjbGFzcz1cIm1kLXRvb2xiYXItdG9vbHNcIj4nICtcbiAgICAgICAgICAgICcgICAgIDxoMj57e3Byb2plY3QubmFtZX19PC9oMj4nICtcbiAgICAgICAgICAgICcgICA8L2Rpdj4nICtcbiAgICAgICAgICAgICcgIDwvbWQtdG9vbGJhcj4nICtcbiAgICAgICAgICAgICcgIDxtZC1kaWFsb2ctY29udGVudD4nK1xuICAgICAgICAgICAgJyAgICA8cCBjbGFzcz1cImludGVudC1wXCIgbmctYmluZC1odG1sPVwicHJvamVjdC5pbmZvXCI+PC9wPicgK1xuICAgICAgICAgICAgJyAgPC9tZC1kaWFsb2ctY29udGVudD4nICtcbiAgICAgICAgICAgICcgIDxkaXYgY2xhc3M9XCJtZC1hY3Rpb25zXCI+JyArXG4gICAgICAgICAgICAnICAgIDxtZC1idXR0b24gbmctY2xpY2s9XCJjbG9zZVByb2plY3RJbmZvKClcIiBjbGFzcz1cIm1kLXByaW1hcnlcIj4nICtcbiAgICAgICAgICAgICcgICAgICBJbXByZXNzaXZlIScgK1xuICAgICAgICAgICAgJyAgICA8L21kLWJ1dHRvbj4nICtcbiAgICAgICAgICAgICcgIDwvZGl2PicgK1xuICAgICAgICAgICAgJzwvbWQtZGlhbG9nPicsXG4gICAgICBjbGlja091dHNpZGVUb0Nsb3NlOiB0cnVlLFxuICAgICAgZXNjYXBlVG9DbG9zZTogdHJ1ZSxcbiAgICAgIGxvY2FsczogIHtcbiAgICAgICAgcHJvamVjdCA6IHRoaXNQcm9qZWN0XG4gICAgICB9LFxuICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gRGlhbG9nQ29udHJvbGxlcigkc2NvcGUsICRtZERpYWxvZywgcHJvamVjdCkge1xuICAgICAgICAkc2NvcGUucHJvamVjdCA9IHByb2plY3Q7XG4gICAgICAgICRzY29wZS5jbG9zZVByb2plY3RJbmZvID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgJG1kRGlhbG9nLmhpZGUoKTtcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgICRtZERpYWxvZy5zaG93KGRpYWxvZ0NvbnRlbnQpLnRoZW4oZnVuY3Rpb24oKSB7XG5cbiAgICB9KTtcbiAgfTtcbiAgXG59KTtcbmFwcC5kaXJlY3RpdmUoJ3Byb2pJbWcnLCBmdW5jdGlvbigpe1xuICAgIHJldHVybiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpe1xuICAgICAgICBhdHRycy4kb2JzZXJ2ZSgncHJvakltZycsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBlbGVtZW50LmNzcyh7XG4gICAgICAgICAgICAgICAgJ2JhY2tncm91bmQtaW1hZ2UnOiAndXJsKCcgKyB2YWx1ZSArJyknXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pO1xuYXBwLmNvbnRyb2xsZXIoJ0hvbWVDdHJsJywgZnVuY3Rpb24oJHNjb3BlLCAkc2NlKSB7XG4gICRzY29wZS5ob2JiaWVzID0gW3tcbiAgICBuYW1lOiBcIkxvbmdib2FyZGVyXCIsXG4gICAgZGVzYzogJHNjZS50cnVzdEFzSHRtbChcIkkgbGVhcm5lZCB0byByaWRlIGFib3V0IGEgeWVhciBhZ28sIGFuZCBsZWFybmluZyBtaWdodCBoYXZlIGJlZW4gb25lIG9mIHRoZVwiICtcbiAgICAgICAgICBcIiAgYmVzdCB0aGluZ3MgSVxcJ3ZlIGV2ZXIgZG9uZS4gSXRcXCdzIGEgcmVhbGx5IGZ1biB3YXkgdG8gZ2V0XCIgK1xuICAgICAgICAgIFwiIGFyb3VuZCBhbmQgYW4gZXZlbiBiZXR0ZXIgd2F5IHRvIHN0YXkgYWN0aXZlLjwvcD48cD5cIiArXG4gICAgICAgICAgXCIgSSBldmVuIG1hbmFnZWQgdG8gZGVzaWduIGEgZGVjYWwgYW5kIHBhaW50IGl0IG9udG8gbXkgYm9hcmQhXCIpLFxuICB9LHtcbiAgICBuYW1lOiBcIkNvbWljIFJlYWRlclwiLFxuICAgIGRlc2M6ICRzY2UudHJ1c3RBc0h0bWwoXCJJXFwnbSBhIGh1Z2UgREMgY29taWNzIGZhbi4gSSBjYW4gYXBwcmVjaWF0ZSB0aGUgYW1vdW50IG9mIHdvcmsgdGhhdCBnb2VzIGludG8gYnVpbGRpbmcgYSBtdWx0aXZlcnNlLjwvcD5cIiArXG4gICAgICAgICAgXCI8cD5UaGVyZSBhcmUgc28gbWFueSBtb3ZpbmcgcGFydHMgdG8gZmFjdG9yIGluIGFuZCBpdFxcJ3MgYW1hemluZyB0byBzZWUgaG93IGF1dGhvcnMgY2FuIFwiICsgXG4gICAgICAgICAgXCJjb250aW51ZSB0byBpbm5vdmF0ZSB0aGUgY2hhcmFjdGVycyBhbmQgcHJlc2VudCB0aGVpciBmYW5zIHdpdGggbmV3IHRvcGljcyB0byB0aGluayBhYm91dCBldmVyeSBpc3N1ZS5cIiksXG4gICAgbGluazogXCIjY29taWNzXCJcbiAgfSx7XG4gICAgbmFtZTogXCJEZXZlbG9wZXJcIixcbiAgICBkZXNjOiAkc2NlLnRydXN0QXNIdG1sKFwiSVxcJ20gYSBmdWxsLXN0YWNrIHdlYiBkZXZlbG9wZXIgd2hvIGhhcHBlbnMgdG8gd3JpdGUgbG90cyBvZiBKYXZhc2NyaXB0LiA8L3A+XCIgK1xuICAgICAgICAgIFwiPHA+SSBzdGFydGVkIG9mZiBidWlsZGluZyBhcHBzIHdpdGggUnVieSBvbiBSYWlscyBhbmQgaGF2ZSBtb3ZlZCBvbiB0b1wiICtcbiAgICAgICAgICBcIiBOb2RlIGFuZCBFeHByZXNzLiBXaGF0IHlvdVxcJ3JlIGxvb2tpbmcgYXQgcmlnaHQgbm93IHdhcyBhY3R1YWxseSBidWlsdCB3aXRoIFwiICtcbiAgICAgICAgICBcIk5vZGUgYW5kIEV4cHJlc3MsIGFuZCBhIGdlbmVyb3VzIGFtb3VudCBvZiBBbmd1bGFyLiBDaGVjayBvdXQgbXkgb3RoZXIgd29yayA8YSBzdHlsZT1cXFwidGV4dC1kZWNvcmF0aW9uOm5vbmVcXFwiIGhyZWY9XFxcIi9jb2RlXFxcIj5oZXJlPC9hPlwiKSxcbiAgICBsaW5rOiBcIlwiXG4gIH1dO1xuXG4gICRzY29wZS5jb250YWN0SW5mb3MgPSBbe1xuICAgIGlkOiAnYnRuLXR3aXR0ZXInLFxuICAgIGxhYmVsOiAnVFdJVFRFUicsXG4gICAgdXJsOiAnaHR0cHM6Ly90d2l0dGVyLmNvbS9hbGZyZWRhYmFiX2lvJ1xuICB9LCB7XG4gICAgaWQ6ICdidG4tZ2l0aHViJyxcbiAgICBsYWJlbDogJ0dJVEhVQicsXG4gICAgdXJsOiAnaHR0cHM6Ly9naXRodWIuY29tL2FsZnJlZCdcbiAgfSwge1xuICAgIGlkOiAnYnRuLWxpbmtlZGluJyxcbiAgICBsYWJlbDogJ0xJTktFRElOJyxcbiAgICB1cmw6ICdodHRwczovL3d3dy5saW5rZWRpbi5jb20vaW4vYWxmcmVkYWJhYmlvL2VuJ1xuICB9LCB7XG4gICAgaWQ6ICdidG4tZW1haWwnLFxuICAgIGxhYmVsOiAnRU1BSUwnLFxuICAgIHVybDogJ21haWx0bzphYWJhYmlvNzVAZ21haWwuY29tJ1xuICB9XTtcblxuICAkc2NvcGUuYWJvdXRUZXh0ID0geyAgICAgICAgICBcbiAgICBpbnRybzogXCJIaSwgSVxcJ20gQWxmcmVkLlwiLCAgICAgXG4gICAgYm9keTogJHNjZS50cnVzdEFzSHRtbChcIklcXCdtIGEgQ29tcHV0ZXIgU2NpZW5jZSBzdHVkZW50IGF0IE5vcnRoZWFzdGVybiwgYW4gYW1hdGV1ciBwb29sIChwb2NrZXQgYmlsbGlhcmRzKSBwbGF5ZXIsIFwiICsgXG4gICAgICBcImFuZCBhIGZpcm0gYmVsaWV2ZXIgdGhhdCBhbnlvbmUgY2FuIGxlYXJuIHRvIGRvIGFueXRoaW5nIGJ5IEdvb2dsaW5nIGl0IGxvbmcgZW5vdWdoLjwvcD48cD5cIiArXG4gICAgICBcIkFsc28sIG15IGZyaWVuZHMgdGhpbmsgSVxcJ20gYSBwcmV0dHkgY29vbCBndXkgKGV2ZW4gdGhvdWdoIHRoZXlcXCdsbCBkZW55IGl0IGFmdGVyIHJlYWRpbmcgdGhpcy4pXCIpLFxuICB9OyAgXG59KTtcbihmdW5jdGlvbiAobmcpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuIFxuICB2YXIgYXBwID0gbmcubW9kdWxlKCduZ0xvYWRTY3JpcHQnLCBbXSk7XG5cbiAgYXBwLmRpcmVjdGl2ZSgnc2NyaXB0JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICBzY29wZTogZmFsc2UsXG4gICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbSwgYXR0cikgXG4gICAgICB7XG4gICAgICAgIGlmIChhdHRyLnR5cGU9PT0ndGV4dC9qYXZhc2NyaXB0LWxhenknKSBcbiAgICAgICAge1xuICAgICAgICAgIHZhciBzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICBzLnR5cGUgPSBcInRleHQvamF2YXNjcmlwdFwiOyAgICAgICAgICAgICAgICBcbiAgICAgICAgICB2YXIgc3JjID0gZWxlbS5hdHRyKCdzcmMnKTtcbiAgICAgICAgICBpZihzcmMhPT11bmRlZmluZWQpXG4gICAgICAgICAge1xuICAgICAgICAgICAgICBzLnNyYyA9IHNyYztcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdmFyIGNvZGUgPSBlbGVtLnRleHQoKTtcbiAgICAgICAgICAgICAgcy50ZXh0ID0gY29kZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzKTtcbiAgICAgICAgICBlbGVtLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG4gXG59KGFuZ3VsYXIpKTtcblxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
