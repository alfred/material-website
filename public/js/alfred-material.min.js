"use strict";var app=angular.module("alfredMaterial",["ngMaterial","ngRoute","ngLoadScript","ngSanitize"]);app.config(["$mdThemingProvider",function($mdThemingProvider){$mdThemingProvider.theme("default").primaryPalette("deep-purple",{"default":"400"}).accentPalette("amber"),$mdThemingProvider.theme("code").primaryPalette("cyan",{"default":"700"}).accentPalette("pink"),$mdThemingProvider.theme("comics").primaryPalette("red",{"default":"600"}).accentPalette("amber"),$mdThemingProvider.alwaysWatchTheme(!0)}]),app.config(["$locationProvider",function($locationProvider){$locationProvider.html5Mode(!0)}]),app.config(["$routeProvider","$mdThemingProvider",function($routeProvider,$mdThemingProvider){$routeProvider.when("/",{templateUrl:"/views/home/home.html",title:"Home",theme:"default",iconColor:"#7E57C2"}).when("/code",{templateUrl:"/views/projects/projects.html",title:"Code",theme:"code",iconColor:"#0097A7"}).when("/comics",{templateUrl:"/views/library/library.html",title:"Library",theme:"comics",iconColor:"#E53935"}).when("/resume",{redirectTo:function(){$window.location.href="/resume"}}).when("/old",{redirectTo:function(){$window.location.href="/old"}}).when("/mean",{redirectTo:function(){$window.location.href="/mean"}}).otherwise({redirectTo:"/"})}]),app.config(["$mdIconProvider",function($mdIconProvider){$mdIconProvider.icon("demo","icons/desktop mac.svg").icon("github","icons/github.svg").icon("comic","icons/dashboard.svg").icon("code","icons/code.svg").icon("resume","icons/description.svg").icon("home","icons/home.svg").icon("info","icons/info.svg")}]),app.run(["$http","$templateCache",function($http,$templateCache){var iconUrls=["icons/desktop mac.svg","icons/github.svg","icons/dashboard.svg","icons/code.svg","icons/description.svg","icons/home.svg","icons/info.svg"];angular.forEach(iconUrls,function(url){$http.get(url,{cache:$templateCache})})}]),app.controller("AppCtrl",["$scope","$log","$location",function($scope,$log,$location){$scope.$on("$routeChangeSuccess",function(event,data){$scope.theme=data.theme})}]),app.controller("NavCtrl",["$scope","$location","$mdSidenav","$log","$window",function($scope,$location,$mdSidenav,$log,$window){$scope.$on("$routeChangeSuccess",function(event,data){$scope.pageTitle=data.title,$scope.iconColor=data.iconColor}),$scope.navLinks=[{name:"Home",url:"/",icon:"home"},{name:"Code",url:"/code",icon:"code"},{name:"Library",url:"/comics",icon:"comic"},{name:"Resume",url:"/resume",icon:"resume"}],$scope.toggleSideMenu=function(){$mdSidenav("sideNav").toggle().then(function(){if($mdSidenav("sideNav").isOpen()){var backdropElement=document.getElementsByClassName("md-sidenav-backdrop");backdropElement&&backdropElement[0].addEventListener("click",function(){animateToMenu()})}})},$scope.navigateTo=function(url){"/resume"==url?$window.location.href=url:$location.path(url)}}]),app.controller("ProjectsCtrl",["$scope","$timeout","$mdSidenav","$log","$mdDialog","$sce",function($scope,$timeout,$mdSidenav,$log,$mdDialog,$sce){$scope.allProjects={mdSite:{name:"Alfred Material",screenshot:"/imgs/projects/md-site-cover.jpg",description:"",repository:"https://github.com/alfred/material-website",demoLink:"http://alfredabab.io",tech:[],learned:"",darkOverlay:!0},ef:{name:"Exemption Check",screenshot:"/imgs/projects/ef.png",description:"",repository:"",info:$sce.trustAsHtml("TurboTax Exemption Check is a tool for customers to find out whether they are exempt from the healthcare penalty for that tax year. While working on Exemption Check, I was an engineer responsible for implementing cross-device data persistence. This allowed customers to start the application on one device and sign out, and then sign back in on a second deviceand complete their application where they left off.</p><p>I was also part of the small team that was tasked with a massive rewrite of the tool once the Affordable Care Act law changed to allow one form per household instead of one form per member of the household. This required rapid implementation of features and also required that we didn’t break the core functionality as that was still the primary use-case.</p><p>I was a full-stack engineer, as I worked with the backend services as much as I was doing CSS tweaks on the frontend which required comprehensive unit tests for both. During peak times I was also responsible for monitoring our Splunk logs for service outtages and errors."),demoLink:"https://turbotax.intuit.com/health-care/exemptions",tech:[],learned:"",darkOverlay:!0},oldSite:{name:"Old Website",screenshot:"/imgs/projects/old-s.png",description:"",repository:"https://github.com/alfred/Website",demoLink:"/old",tech:[],learned:"https://github.com/alfred/Website"},mean:{name:"MEAN Skeleton",screenshot:"/imgs/projects/md-orange-pyramids.png",description:"",repository:"https://github.com/alfred/mean-skeleton",demoLink:"/mean",tech:[],learned:""},moderator:{name:"Cengage Moderator",screenshot:"/imgs/projects/md-teal-tri.jpg",description:"",repository:"",info:$sce.trustAsHtml("While working on Cengage Moderator, I was on a small team of engineers who had a lot of freedom over the architecture and technology used to create a question and answer application for the company to use to ask questions of the CTO during his office hours.</p><p>I was responsible for architecting the user model. This means that I implemented user account creation, user sessions and account recovery. All of my solutions were created in-house as the popular Ruby gem, “devise” was too heavy for the simplicity of the project. A long with user accounts, I also implemented user profiles and access levels for roles.</p><p> Due to the nature of the application, we had many nested data-models and my team had to teach ourselves relational data models. For example, we used many-to-many for users favoriting and voting on questions, so that a user could browse their favorite questions. I also set up automated unit and integration testing suites and wrote some of the frontend interactions."),demoLink:"http://moderator.cengage.com",tech:[],learned:""},cssLogos:{name:"CSS Logos",screenshot:"/imgs/projects/md-grey-circle.png",description:"",repository:"https://github.com/alfred/css-logos",demoLink:"http://alfred.github.io/css-logos/",tech:[],learned:""}},$scope.openProjectInfo=function(ev,name){var bodyElement=angular.element(document.body),thisProject=$scope.allProjects[name],dialogContent=$mdDialog.alert({parent:bodyElement,targetEvent:ev,template:'<md-dialog>  <md-toolbar>   <div class="md-toolbar-tools">     <h2>{{project.name}}</h2>   </div>  </md-toolbar>  <md-dialog-content>    <p class="intent-p" ng-bind-html="project.info"></p>  </md-dialog-content>  <div class="md-actions">    <md-button ng-click="closeProjectInfo()" class="md-primary">      Impressive!    </md-button>  </div></md-dialog>',clickOutsideToClose:!0,escapeToClose:!0,locals:{project:thisProject},controller:function($scope,$mdDialog,project){$scope.project=project,$scope.closeProjectInfo=function(){$mdDialog.hide()}}});$mdDialog.show(dialogContent).then(function(){})}}]),app.directive("projImg",function(){return function(scope,element,attrs){attrs.$observe("projImg",function(value){element.css({"background-image":"url("+value+")"})})}}),app.controller("HomeCtrl",["$scope","$sce","$window",function($scope,$sce,$window){$scope.hobbies=[{name:"Longboarder",desc:$sce.trustAsHtml("I learned to ride about a year ago, and learning might have been one of the  best things I've ever done. It's a really fun way to get around and an even better way to stay active.</p><p> I even managed to design a decal and paint it onto my board!")},{name:"Comic Reader",desc:$sce.trustAsHtml("I'm a huge DC comics fan. I can appreciate the amount of work that goes into building a multiverse.</p><p>There are so many moving parts to factor in and it's amazing to see how authors can continue to innovate the characters and present their fans with new topics to think about every issue."),link:"#comics"},{name:"Developer",desc:$sce.trustAsHtml('I\'m a full-stack web developer who happens to write lots of Javascript. </p><p>I started off building apps with Ruby on Rails and have moved on to Node and Express. What you\'re looking at right now was actually built with Node and Express, and a generous amount of Angular. Check out my other work <a style="text-decoration:none" href="/code">here</a>'),link:""}],$scope.contactInfos=[{id:"btn-twitter",label:"TWITTER",url:"https://twitter.com/alfredabab_io"},{id:"btn-github",label:"GITHUB",url:"https://github.com/alfred"},{id:"btn-linkedin",label:"LINKEDIN",url:"https://www.linkedin.com/in/alfredababio/en"},{id:"btn-email",label:"EMAIL",url:"mailto:aababio75@gmail.com"}],$scope.aboutText={intro:"Hi, I'm Alfred.",body:$sce.trustAsHtml("I'm a Computer Science student at Northeastern, an amateur pool (pocket billiards) player, and a firm believer that anyone can learn to do anything by Googling it long enough.</p><p>Also, my friends think I'm a pretty cool guy (even though they'll deny it after reading this.)")};var initialize=function(){window.addEventListener("resize",resizeImages),window.innerWidth<=768&&(console.log("In Mobile"),window.onload=resizeImages(),resizeImages(),console.log("Resized"))},resizeImages=function(){if(!(window.innerWidth>768)){var myPicture=document.querySelector("#about > .card-image"),codePicture=document.querySelector("#developer > .card-image"),longboardPicture=document.querySelector("#longboard > .card-image"),comicsPicture=document.querySelector("#comics > .card-image"),myRatio=165/304;myPicture.style.maxHeight=""+myPicture.clientWidth*myRatio+"px",codePicture.style.maxHeight=""+codePicture.clientWidth*myRatio+"px",longboardPicture.style.maxHeight=""+longboardPicture.clientWidth*myRatio+"px",comicsPicture.style.maxHeight=""+comicsPicture.clientWidth*myRatio+"px"}};initialize()}]),function(ng){var app=ng.module("ngLoadScript",[]);app.directive("script",function(){return{restrict:"E",scope:!1,link:function(scope,elem,attr){if("text/javascript-lazy"===attr.type){var s=document.createElement("script");s.type="text/javascript";var src=elem.attr("src");if(void 0!==src)s.src=src;else{var code=elem.text();s.text=code}document.head.appendChild(s),elem.remove()}}}})}(angular);
//# sourceMappingURL=data:application/json;base64,
